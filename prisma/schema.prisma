// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test {
  id Int @id
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  nerdAt        String?
  posts         Post[]
  bio           String?
  countryId     String?
  country       Country?
  link          String?
  visualName    String?
  firstTime     Boolean       @default(true)
  PostComment   PostComment[]
  likes         Like[]
  bookmarks     Bookmark[]

  @@unique([email])
  @@map("user")
}

model Country {
  id                  String   @id @default(uuid())
  alpha2              String
  alpha3              String
  countryCallingCodes String[]
  currencies          String[]
  emoji               String?
  ioc                 String
  languages           String[]
  name                String
  status              String
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("country")
}

model Post {
  id           String        @id @default(uuid())
  content      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  userId       String
  access       PostAccess    @default(public)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  postcomments PostComment[]
  likes        Like[]
  bookmarks    Bookmark[]

  @@map("posts")
}

model PostComment {
  id        String        @id @default(uuid())
  userId    String
  postId    String
  parentId  String?
  content   String
  replies   PostComment[] @relation("CommentReplies")
  parent    PostComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("postcomments")
}

enum PostAccess {
  private
  public
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@unique([userId, postId]) // Ensures a user can like a post only once
}

model Bookmark {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@unique([userId, postId]) // Ensures a user can bookmark a post only once
}
